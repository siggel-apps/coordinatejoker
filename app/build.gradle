//apply plugin: 'com.android.application'
plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
}

android {
    signingConfigs {
    }
    compileSdkVersion 34

    /*
    // autoincrement version with each release assembly
    Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    List<String> runTasks = gradle.startParameter.getTaskNames()
    def value = 0
    for (String item : runTasks)
        if (item.contains("assembleRelease")) {
            value = 1
        }
    def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + value
    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
    */
    /*
    Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    def code = (versionProps['VERSION_CODE'] ?: "0").toInteger()
    */

    defaultConfig {
        applicationId 'com.github.siggel.coordinatejoker'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 34
        versionName "1.4.34"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            //useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.github.siggel.coordinatejoker'
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = applicationId
        outputFileName += "-" + android.defaultConfig.versionName
        if (variant.buildType.name == "release") {
            outputFileName += ".apk"
        } else {
            outputFileName += "-debug.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'net.objecthunter:exp4j:0.4.8'
    implementation 'com.asamm:locus-api-android:0.9.49'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'

    // test
    androidTestImplementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
}

afterEvaluate {
    assembleRelease.finalizedBy(copyEnglishReleaseNotesForFDroid)
    assembleRelease.finalizedBy(copyGermanReleaseNotesForFDroid)
    assembleDebug.finalizedBy(copyEnglishReleaseNotesForFDroid)
    assembleDebug.finalizedBy(copyGermanReleaseNotesForFDroid)
}

task copyGermanReleaseNotesForFDroid(type: Copy) {
    from "src/main/assets"
    include "changes_version_*_de.html"
    into "../fastlane/metadata/android/de-DE/changelogs"
    filter { line -> line.replaceAll('\\s*<p>\\s*', '') }
    filter { line -> line.replaceAll('<\\s*/p>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*</ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<li>\\s*', '- ') }
    filter { line -> line.replaceAll('\\s*</li>\\s*', '') }
    rename '.+_([0-9]+)_de.html', '$1.txt'
}

task copyEnglishReleaseNotesForFDroid(type: Copy) {
    from "src/main/assets"
    include "changes_version_*_en.html"
    into "../fastlane/metadata/android/en-US/changelogs"
    filter { line -> line.replaceAll('\\s*<p>\\s*', '') }
    filter { line -> line.replaceAll('<\\s*/p>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*</ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<li>\\s*', '- ') }
    filter { line -> line.replaceAll('\\s*</li>\\s*', '') }
    rename '.+_([0-9]+)_en.html', '$1.txt'
}

